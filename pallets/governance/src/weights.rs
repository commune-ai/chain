
//! Autogenerated weights for `pallet_governance`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2024-12-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ubuntu-64gb-hil-2`, CPU: `AMD EPYC-Milan Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("specs/local.json")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-chain
// benchmark
// pallet
// --chain
// specs/local.json
// --pallet
// pallet_governance
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/governance/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_governance`.
pub trait WeightInfo {
	fn add_global_params_proposal() -> Weight;
	fn add_subnet_params_proposal() -> Weight;
	fn add_global_custom_proposal() -> Weight;
	fn add_subnet_custom_proposal() -> Weight;
	fn add_transfer_dao_treasury_proposal() -> Weight;
	fn vote_proposal() -> Weight;
	fn remove_vote_proposal() -> Weight;
	fn enable_vote_power_delegation() -> Weight;
	fn disable_vote_power_delegation() -> Weight;
	fn add_dao_application() -> Weight;
	fn refuse_dao_application() -> Weight;
	fn add_to_whitelist() -> Weight;
	fn remove_from_whitelist() -> Weight;
}

/// Weights for `pallet_governance` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ChainModule::MaxNameLength` (r:1 w:0)
	/// Proof: `ChainModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinNameLength` (r:1 w:0)
	/// Proof: `ChainModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `ChainModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `ChainModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ChainModule::FloorFounderShare` (r:1 w:0)
	/// Proof: `ChainModule::FloorFounderShare` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinFees` (r:1 w:0)
	/// Proof: `ChainModule::MinFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `ChainModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `ChainModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinWeightStake` (r:1 w:0)
	/// Proof: `ChainModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::SubnetImmunityPeriod` (r:1 w:0)
	/// Proof: `ChainModule::SubnetImmunityPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GeneralSubnetApplicationCost` (r:1 w:0)
	/// Proof: `GovernanceModule::GeneralSubnetApplicationCost` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ChainModule::Kappa` (r:1 w:0)
	/// Proof: `ChainModule::Kappa` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::Rho` (r:1 w:0)
	/// Proof: `ChainModule::Rho` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_global_params_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1316`
		//  Estimated: `3569`
		// Minimum execution time: 99_207_000 picoseconds.
		Weight::from_parts(100_810_000, 3569)
			.saturating_add(T::DbWeight::get().reads(17_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

	fn add_subnet_params_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2633`
		//  Estimated: `18473`
		// Minimum execution time: 240_284_000 picoseconds.
		Weight::from_parts(247_908_000, 18473)
			.saturating_add(T::DbWeight::get().reads(43_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_global_custom_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `3569`
		// Minimum execution time: 44_263_000 picoseconds.
		Weight::from_parts(45_276_000, 3569)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_subnet_custom_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `3569`
		// Minimum execution time: 49_733_000 picoseconds.
		Weight::from_parts(50_996_000, 3569)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `GovernanceModule::DaoTreasuryAddress` (r:1 w:0)
	/// Proof: `GovernanceModule::DaoTreasuryAddress` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:2 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_transfer_dao_treasury_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `6148`
		// Minimum execution time: 54_382_000 picoseconds.
		Weight::from_parts(55_495_000, 6148)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `ChainModule::StakeFrom` (r:2 w:0)
	/// Proof: `ChainModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::StakeTo` (r:2 w:0)
	/// Proof: `ChainModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::NotDelegatingVotingPower` (r:1 w:0)
	/// Proof: `GovernanceModule::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1186`
		//  Estimated: `7126`
		// Minimum execution time: 56_987_000 picoseconds.
		Weight::from_parts(58_510_000, 7126)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn remove_vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `195`
		//  Estimated: `3464`
		// Minimum execution time: 21_802_000 picoseconds.
		Weight::from_parts(22_642_000, 3464)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::NotDelegatingVotingPower` (r:1 w:1)
	/// Proof: `GovernanceModule::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn enable_vote_power_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `1484`
		// Minimum execution time: 7_615_000 picoseconds.
		Weight::from_parts(7_975_000, 1484)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::NotDelegatingVotingPower` (r:1 w:1)
	/// Proof: `GovernanceModule::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn disable_vote_power_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `1484`
		// Minimum execution time: 8_096_000 picoseconds.
		Weight::from_parts(8_486_000, 1484)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::LegitWhitelist` (r:1 w:0)
	/// Proof: `GovernanceModule::LegitWhitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::CuratorApplications` (r:1 w:1)
	/// Proof: `GovernanceModule::CuratorApplications` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::GeneralSubnetApplicationCost` (r:1 w:0)
	/// Proof: `GovernanceModule::GeneralSubnetApplicationCost` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn add_dao_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `3820`
		// Minimum execution time: 49_253_000 picoseconds.
		Weight::from_parts(50_515_000, 3820)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::CuratorApplications` (r:1 w:1)
	/// Proof: `GovernanceModule::CuratorApplications` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `MaxEncodedLen`)
	fn refuse_dao_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `222`
		//  Estimated: `3820`
		// Minimum execution time: 15_109_000 picoseconds.
		Weight::from_parts(15_529_000, 3820)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::LegitWhitelist` (r:1 w:1)
	/// Proof: `GovernanceModule::LegitWhitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::CuratorApplications` (r:2 w:1)
	/// Proof: `GovernanceModule::CuratorApplications` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn add_to_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `299`
		//  Estimated: `6650`
		// Minimum execution time: 58_280_000 picoseconds.
		Weight::from_parts(60_474_000, 6650)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::LegitWhitelist` (r:1 w:1)
	/// Proof: `GovernanceModule::LegitWhitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::CuratorApplications` (r:2 w:1)
	/// Proof: `GovernanceModule::CuratorApplications` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `MaxEncodedLen`)
	fn remove_from_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `275`
		//  Estimated: `6650`
		// Minimum execution time: 33_903_000 picoseconds.
		Weight::from_parts(34_826_000, 6650)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ChainModule::MaxNameLength` (r:1 w:0)
	/// Proof: `ChainModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinNameLength` (r:1 w:0)
	/// Proof: `ChainModule::MinNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `ChainModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxAllowedModules` (r:1 w:0)
	/// Proof: `ChainModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `ChainModule::FloorFounderShare` (r:1 w:0)
	/// Proof: `ChainModule::FloorFounderShare` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinFees` (r:1 w:0)
	/// Proof: `ChainModule::MinFees` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `ChainModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxAllowedWeightsGlobal` (r:1 w:0)
	/// Proof: `ChainModule::MaxAllowedWeightsGlobal` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinWeightStake` (r:1 w:0)
	/// Proof: `ChainModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::SubnetImmunityPeriod` (r:1 w:0)
	/// Proof: `ChainModule::SubnetImmunityPeriod` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GeneralSubnetApplicationCost` (r:1 w:0)
	/// Proof: `GovernanceModule::GeneralSubnetApplicationCost` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `ChainModule::Kappa` (r:1 w:0)
	/// Proof: `ChainModule::Kappa` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::Rho` (r:1 w:0)
	/// Proof: `ChainModule::Rho` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_global_params_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1316`
		//  Estimated: `3569`
		// Minimum execution time: 99_207_000 picoseconds.
		Weight::from_parts(100_810_000, 3569)
			.saturating_add(RocksDbWeight::get().reads(17_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}

	fn add_subnet_params_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2633`
		//  Estimated: `18473`
		// Minimum execution time: 240_284_000 picoseconds.
		Weight::from_parts(247_908_000, 18473)
			.saturating_add(RocksDbWeight::get().reads(43_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `GovernanceModule::GlobalGovernanceConfig` (r:1 w:0)
	/// Proof: `GovernanceModule::GlobalGovernanceConfig` (`max_values`: Some(1), `max_size`: Some(30), added: 525, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn add_global_custom_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `3569`
		// Minimum execution time: 44_263_000 picoseconds.
		Weight::from_parts(45_276_000, 3569)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}

	fn add_subnet_custom_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `3569`
		// Minimum execution time: 49_733_000 picoseconds.
		Weight::from_parts(50_996_000, 3569)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}

	fn add_transfer_dao_treasury_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `318`
		//  Estimated: `6148`
		// Minimum execution time: 54_382_000 picoseconds.
		Weight::from_parts(55_495_000, 6148)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	/// Storage: `ChainModule::StakeFrom` (r:2 w:0)
	/// Proof: `ChainModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::StakeTo` (r:2 w:0)
	/// Proof: `ChainModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `GovernanceModule::NotDelegatingVotingPower` (r:1 w:0)
	/// Proof: `GovernanceModule::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1186`
		//  Estimated: `7126`
		// Minimum execution time: 56_987_000 picoseconds.
		Weight::from_parts(58_510_000, 7126)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::Proposals` (r:1 w:1)
	/// Proof: `GovernanceModule::Proposals` (`max_values`: None, `max_size`: Some(4294967295), added: 2474, mode: `MaxEncodedLen`)
	fn remove_vote_proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `195`
		//  Estimated: `3464`
		// Minimum execution time: 21_802_000 picoseconds.
		Weight::from_parts(22_642_000, 3464)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::NotDelegatingVotingPower` (r:1 w:1)
	/// Proof: `GovernanceModule::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn enable_vote_power_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `1484`
		// Minimum execution time: 7_615_000 picoseconds.
		Weight::from_parts(7_975_000, 1484)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::NotDelegatingVotingPower` (r:1 w:1)
	/// Proof: `GovernanceModule::NotDelegatingVotingPower` (`max_values`: Some(1), `max_size`: Some(4294967295), added: 494, mode: `MaxEncodedLen`)
	fn disable_vote_power_delegation() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `43`
		//  Estimated: `1484`
		// Minimum execution time: 8_096_000 picoseconds.
		Weight::from_parts(8_486_000, 1484)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::LegitWhitelist` (r:1 w:0)
	/// Proof: `GovernanceModule::LegitWhitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::CuratorApplications` (r:1 w:1)
	/// Proof: `GovernanceModule::CuratorApplications` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::GeneralSubnetApplicationCost` (r:1 w:0)
	/// Proof: `GovernanceModule::GeneralSubnetApplicationCost` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn add_dao_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `120`
		//  Estimated: `3820`
		// Minimum execution time: 49_253_000 picoseconds.
		Weight::from_parts(50_515_000, 3820)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::CuratorApplications` (r:1 w:1)
	/// Proof: `GovernanceModule::CuratorApplications` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `MaxEncodedLen`)
	fn refuse_dao_application() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `222`
		//  Estimated: `3820`
		// Minimum execution time: 15_109_000 picoseconds.
		Weight::from_parts(15_529_000, 3820)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::LegitWhitelist` (r:1 w:1)
	/// Proof: `GovernanceModule::LegitWhitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::CuratorApplications` (r:2 w:1)
	/// Proof: `GovernanceModule::CuratorApplications` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn add_to_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `299`
		//  Estimated: `6650`
		// Minimum execution time: 58_280_000 picoseconds.
		Weight::from_parts(60_474_000, 6650)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `GovernanceModule::Curator` (r:1 w:0)
	/// Proof: `GovernanceModule::Curator` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::LegitWhitelist` (r:1 w:1)
	/// Proof: `GovernanceModule::LegitWhitelist` (`max_values`: None, `max_size`: Some(32), added: 2507, mode: `MaxEncodedLen`)
	/// Storage: `GovernanceModule::CuratorApplications` (r:2 w:1)
	/// Proof: `GovernanceModule::CuratorApplications` (`max_values`: None, `max_size`: Some(355), added: 2830, mode: `MaxEncodedLen`)
	fn remove_from_whitelist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `275`
		//  Estimated: `6650`
		// Minimum execution time: 33_903_000 picoseconds.
		Weight::from_parts(34_826_000, 6650)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}