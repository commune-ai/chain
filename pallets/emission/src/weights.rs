
//! Autogenerated weights for `pallet_emission`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2024-12-02, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `ubuntu-64gb-hil-2`, CPU: `AMD EPYC-Milan Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("specs/local.json")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-chain
// benchmark
// pallet
// --chain
// specs/local.json
// --pallet
// pallet_emission
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/emission/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_emission`.
pub trait WeightInfo {
	fn set_weights() -> Weight;
	fn delegate_weight_control() -> Weight;
	fn remove_weight_control() -> Weight;
}

/// Weights for `pallet_emission` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {

	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2481`
		//  Estimated: `18321`
		// Minimum execution time: 169_260_000 picoseconds.
		Weight::from_parts(174_900_000, 18321)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}

	fn delegate_weight_control() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1200`
		//  Estimated: `7140`
		// Minimum execution time: 47_329_000 picoseconds.
		Weight::from_parts(48_051_000, 7140)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainModule::Uids` (r:1 w:0)
	/// Proof: `ChainModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::WeightSettingDelegation` (r:1 w:1)
	/// Proof: `ChainModule::WeightSettingDelegation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_weight_control() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `967`
		//  Estimated: `4432`
		// Minimum execution time: 28_353_000 picoseconds.
		Weight::from_parts(29_045_000, 4432)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ChainModule::Uids` (r:1 w:0)
	/// Proof: `ChainModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::StakeFrom` (r:2 w:0)
	/// Proof: `ChainModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinValidatorStake` (r:1 w:0)
	/// Proof: `ChainModule::MinValidatorStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::WeightSettingDelegation` (r:2 w:0)
	/// Proof: `ChainModule::WeightSettingDelegation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::N` (r:1 w:0)
	/// Proof: `ChainModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `ChainModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `ChainModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::SubnetConsensusType` (r:6 w:0)
	/// Proof: `SubnetEmissionModule::SubnetConsensusType` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::Keys` (r:1 w:0)
	/// Proof: `ChainModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MaximumSetWeightCallsPerEpoch` (r:1 w:0)
	/// Proof: `ChainModule::MaximumSetWeightCallsPerEpoch` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::MinWeightStake` (r:1 w:0)
	/// Proof: `ChainModule::MinWeightStake` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::LastUpdate` (r:1 w:1)
	/// Proof: `ChainModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubnetEmissionModule::Weights` (r:0 w:1)
	/// Proof: `SubnetEmissionModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2481`
		//  Estimated: `18321`
		// Minimum execution time: 169_260_000 picoseconds.
		Weight::from_parts(174_900_000, 18321)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}


	fn delegate_weight_control() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1200`
		//  Estimated: `7140`
		// Minimum execution time: 47_329_000 picoseconds.
		Weight::from_parts(48_051_000, 7140)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ChainModule::Uids` (r:1 w:0)
	/// Proof: `ChainModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `ChainModule::WeightSettingDelegation` (r:1 w:1)
	/// Proof: `ChainModule::WeightSettingDelegation` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_weight_control() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `967`
		//  Estimated: `4432`
		// Minimum execution time: 28_353_000 picoseconds.
		Weight::from_parts(29_045_000, 4432)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}